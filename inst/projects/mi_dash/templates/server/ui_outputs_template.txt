# Data context ------------------------------------------------------------

# Track which survey the current page is for - the data context
data_context <- reactiveVal("{data_prefix}")

# By default, the data context is the survey corresponding to the first page
observeEvent(input$page_filename, {{
  if (is.null(input$page_filename)) {{
    data_context("{data_prefix}")
  }}
  # Whenever the context changes, set the data context accordingly
  else {{
    ### Data context switching below
    ### Data context switching above
  }}
}})



# Month range controls ----------------------------------------------------
# Month range selection UI is dynamic, changing as the data context does.
# This allows for having only the months available in the data for any page.

# Track earliest  and latest month of current data
min_month <- reactiveVal(min({data_prefix}${data_prefix}_{month_col}))
max_month <- reactiveVal(max({data_prefix}${data_prefix}_{month_col}))

# Whenever data context changes, update the min and max months
observeEvent(data_context(), {{
  min_month(
    glue("{{data_context()}}${{data_context()}}_{month_col}") %>%
      str2expression() %>%
      eval() %>%
      min()
  )
  max_month(
    glue("{{data_context()}}${{data_context()}}_{month_col}") %>%
      str2expression() %>%
      eval() %>%
      max()
  )
}})

# Whenever the min or max month changes, recreate the month range UI
output$month_range_ui <- renderUI({{
  end <- max(unique(eval(str2expression(glue(
    "{{data_context()}}${{data_context()}}_{month_col}"
  )))))
  min_month <- min(unique(eval(str2expression(glue(
    "{{data_context()}}${{data_context()}}_{month_col}"
  )))))
  # Set default month range to earliest month of data, or 12 months ago,
  # whichever is latest
  start <- max(end %m-% months(12), min_month)

  dateRangeInputWithViewMode(
    "month_range",
    start     = start,
    end       = end,
    min       = min_month,
    max       = end,
    startview = "year",
    format    = "M yyyy",
    separator = " - ",
    init_hide = FALSE,
    width     = "100%"
  )
}})

# May not be used in all dashboards; this is just a reactive indicator of the
# number of months in the currently selected range
month_range_gte_3 <- reactive({{
  if (month_diff(input$month_range) >= 3) TRUE else FALSE
}})

# May not be used in all dashboards; this is just a reactive holding the last 3
# months of the currently selected range
past_3_months <- reactive({{
  seq(as.Date(input$month_range[2]), by = "-1 month", length = 3)
}})

# This is used to guard against undesireable updates caused when selecting a
# month range whose end month is earlier than its start month
last_valid_month_range_selection <- reactiveVal(
  c(
    min({data_prefix}${data_prefix}_{month_col}),
    max({data_prefix}${data_prefix}_{month_col})
  )
)

# When an invalid month range is set, don't update last_valid_month_range_selection
# Instead override the selection by setting the start month equal to the last month
observeEvent(input$month_range, {{
  if (input$month_range[2] >= input$month_range[1]) {{
    last_valid_month_range_selection(input$month_range)
  }} else {{
    updateDateRangeInput(session, "month_range", start = input$month_range[2])
  }}
}})

# All button displays all available months, and unhides the start month
# selection and separator if hidden
# When 'All' months selected
observeEvent(input$all_months, {{
  reset("month_range")
  showElement(selector = "#month_range > div > span")
  showElement(selector = "#month_range > div > input:nth-child(1)")
}})

# Single button hides the start month drop down and the separator, and sets it
# to same as current end month selection
observeEvent(input$single_month, {{
  updateDateRangeInput(session, "month_range", start = input$month_range[2])
  hideElement(selector = "#month_range > div > span")
  hideElement(selector = "#month_range > div > input:nth-child(1)")
}})

# Range button only unhides the start month selection and separator if hidden
observeEvent(input$range_months, {{
  showElement(selector = "#month_range > div > span")
  showElement(selector = "#month_range > div > input:nth-child(1)")
}})

# Whenever the month range selection changes, update the indicator text
output$month_range_text <- renderText({{
  month_range_indicator(input$month_range)
}})



# Region selection controls -----------------------------------------------

observeEvent(data_context(), {{
    region_data <- eval(str2expression(glue(
      "{{data_context()}}_regions"
    )))

    updateA11yPrettyCheckboxGroup(
      session,
      inputId = "regions_cb_A",
      choiceNames = region_data,
      choiceValues = region_data,
      selected = region_data,
      prettyOptions = list(
        status = "success",
        shape = "curve",
        thick = TRUE,
        animation = "smooth",
        icon = icon("check")
      )
    )

    updateA11yPrettyCheckboxGroup(
      session,
      inputId = "regions_cb_B",
      choiceNames = rep("", length(region_data)),
      choiceValues = region_data,
      selected = character(0),
      prettyOptions = list(
        status = "success",
        shape = "curve",
        thick = TRUE,
        animation = "smooth",
        icon = icon("xmark")
      )
    )

    addClass(   selector = "#regions_cb_A i", class = "fa-check")
    removeClass(selector = "#regions_cb_A i", class = "fa-xmark")
    removeClass(selector = "#regions_cb_B i", class = "fa-check")
    addClass(   selector = "#regions_cb_B i", class = "fa-xmark")

    regions_saved_A(region_data)
    regions_saved_B(character(0))

    update_A_B_columns(length(regions_saved_B()))

    runjs("Shiny.setInputValue('data_context_changed', true);")
  }},
  ignoreInit = TRUE,
  ignoreNULL = FALSE
)

observeEvent(input$data_context_changed, {{
    runjs("
      $('.pretty.p-icon input:checkbox').change(function () {{
        if (this.checked) {{
          $(this).next().children(':first').addClass('fa-check');
          $(this).next().children(':first').removeClass('fa-xmark');
        }}
        else
        {{
          $(this).next().children(':first').removeClass('fa-check');
          $(this).next().children(':first').addClass('fa-xmark');
        }}
      }});

      var regions_saved_A = [];
      $.each($('#regions_cb_A input:checkbox:checked'), function(){{
        regions_saved_A.push($(this).val());
      }});

      Shiny.setInputValue('region_info_A', regions_saved_A);

      var regions_saved_B = [];
      $.each($('#regions_cb_B input:checkbox:checked'), function(){{
        regions_saved_B.push($(this).val());
      }});

      Shiny.setInputValue('region_info_B', regions_saved_B);

      tippy_regions_A.setContent(
        'Selected regions in left group:<br>' + regions_saved_A.join('<br>')
      );

      tippy_regions_B.setContent(
        'Selected regions in right group:<br>' + regions_saved_B.join('<br>')
      );

      Shiny.setInputValue('data_context_changed', null);
    ")
  }},
  ignoreNULL = TRUE
)

# Track saved choices
regions_saved_A <- reactiveVal(value = {data_prefix}_regions)
regions_saved_B <- reactiveVal(value = NULL)

# Reset button rendering (only shown when there are differences to default)
output$reset_regions_btn <- renderUI({{
  status <- ifelse (
    identical(input$regions_cb_A, {data_prefix}_regions) &&
      identical(input$regions_cb_B, NULL),
    "light", "success"
  )

  actionButton(
    inputId = "reset_regions",
    label = "Reset",
    class = paste0("btn btn-", status)
  )
}})

# Functionality of reset button
observeEvent(
  input$reset_regions, {{
    updatePrettyCheckboxGroup(session, "regions_cb_A", selected = {data_prefix}_regions)
    updatePrettyCheckboxGroup(session, "regions_cb_B", selected = character(0))

    addClass(   selector = "#regions_cb_A i", class = "fa-check")
    removeClass(selector = "#regions_cb_A i", class = "fa-xmark")
    removeClass(selector = "#regions_cb_B i", class = "fa-check")
    addClass(   selector = "#regions_cb_B i", class = "fa-xmark")
  }}
)

# Save button rendering. Since the button is destroyed and recreated whenever a
# checkbox is clicked, the script needs to be run so the event observer is bound
# to the new button.
output$save_regions_btn <- renderUI({{
  status <- ifelse(
    identical(input$regions_cb_A, regions_saved_A()) &&
      identical(input$regions_cb_B, regions_saved_B()),
    "light", "success"
  )

  tagList(
    actionButton(
      inputId = "save_regions",
      label = "Save",
      class = paste0("btn btn-", status)
    ),
    tags$script(HTML("
      $('#save_regions').click(function () {{
        var regions_saved_A = [];
        $.each($('#regions_cb_A input:checkbox:checked'), function(){{
          regions_saved_A.push($(this).val());
        }});

        Shiny.setInputValue('region_info_A', regions_saved_A)

        var regions_saved_B = [];
        $.each($('#regions_cb_B input:checkbox:checked'), function(){{
          regions_saved_B.push($(this).val());
        }});

        Shiny.setInputValue('region_info_B', regions_saved_B)

        tippy_regions_A.setContent(
          'Selected regions in group A:<br>' + regions_saved_A.join('<br>')
        );

        tippy_regions_B.setContent(
          'Selected regions in group B:<br>' + regions_saved_B.join('<br>')
        );
      }});
    "))
  )
}})

# Update groupA and groupB classes according to whether the B column should be shown.
update_A_B_columns <- function(x) {{
  if (x == 0) {{
    removeClass(selector = ".groupA", class = "col-sm-6")
    addClass(   selector = ".groupA", class = "col-sm-12")
    removeClass(selector = ".groupB", class = "col-sm-6")
    addClass(   selector = ".groupB", class = "hidden")
    removeClass(selector = "#region_info_L", class = "col-sm-6")
    addClass(   selector = "#region_info_L", class = "col-sm-12")
    removeClass(selector = "#region_info_R", class = "col-sm-6")
    addClass(   selector = "#region_info_R", class = "hidden")
    runjs("$(window).trigger('resize')")
  }} else {{
    removeClass(selector = ".groupA", class = "col-sm-12")
    addClass(   selector = ".groupA", class = "col-sm-6")
    removeClass(selector = ".groupB", class = "hidden")
    addClass(   selector = ".groupB", class = "col-sm-6")
    showElement(selector = ".groupB")
    removeClass(selector = "#region_info_L", class = "col-sm-12")
    addClass(   selector = "#region_info_L", class = "col-sm-6")
    removeClass(selector = "#region_info_R", class = "hidden")
    addClass(   selector = "#region_info_R", class = "col-sm-6")
    showElement(selector = "#region_info_R")
  }}
}}

# Functionality of save button
observeEvent(
  input$save_regions, {{
    regions_saved_A(input$regions_cb_A)
    regions_saved_B(input$regions_cb_B)

    update_A_B_columns(length(regions_saved_B()))
  }},
  ignoreInit = TRUE,
  ignoreNULL = FALSE
)

# Save on closing the dropmenu. We observe for the appearance of the dropmenu,
# using the MutationObserver API. See the link for details:
# https://www.smashingmagazine.com/2019/04/mutationobserver-api-guide/
# Based on the observed state, a Shiny input is set, which in turn is observed on
# the server.
runjs("
  let mRegionDropmenu = document.getElementById('region_dropmenu_dropmenu'),
  options = {{
    childList: true
  }},

  observer = new MutationObserver(mCallback);

  function mCallback (mutations) {{
    if ($('#tippy-5').is(':visible')) {{
      Shiny.setInputValue('regions_dropmenu_has_closed', false)
    }} else {{
      Shiny.setInputValue('regions_dropmenu_has_closed', true)
    }}
  }}

  observer.observe(mRegionDropmenu, options);
")

observeEvent(input$regions_dropmenu_has_closed, {{
  if (input$regions_dropmenu_has_closed) {{
    regions_saved_A(input$regions_cb_A)
    regions_saved_B(input$regions_cb_B)

    update_A_B_columns(length(regions_saved_B()))

    runjs("
      var regions_saved_A = [];
      $.each($('#regions_cb_A input:checkbox:checked'), function(){{
        regions_saved_A.push($(this).val());
      }});

      Shiny.setInputValue('region_info_A', regions_saved_A)

      var regions_saved_B = [];
      $.each($('#regions_cb_B input:checkbox:checked'), function(){{
        regions_saved_B.push($(this).val());
      }});

      Shiny.setInputValue('region_info_B', regions_saved_B)

      tippy_regions_A.setContent(
        'Selected regions in left group:<br>' + regions_saved_A.join('<br>')
      );

      tippy_regions_B.setContent(
        'Selected regions in right group:<br>' + regions_saved_B.join('<br>')
      );

      tippy_regions_A.enable();
      tippy_regions_B.enable();
    ")
  }} else {{
    runjs("
      tippy_regions_A.disable();
      tippy_regions_B.disable();
    ")
  }}
}})



# Dynamic text ------------------------------------------------------------

output$region_info_L <- renderText({{
  glue_collapse(input$region_info_A, sep = ", ")
}})

output$region_info_R <- renderText({{
  glue_collapse(input$region_info_B, sep = ", ")
}})

output$page_title <- renderUI({{
  if (is.null(input$page_title)) h1(style = "margin: 0", "{page_1}")
  else h1(style = "margin: 0", input$page_title)
}})



# Survey download handlers ------------------------------------------------

### Survey download output below
### Survey download output above
