# Load packages -----------------------------------------------------------
library(shiny)
library(shinyjs)
library(shinyWidgets)

### Plotting
library(cowplot)
library(grid)
library(highcharter)
library(plotly)

### Data manipulation
library(DT)
library(tidyverse)

### Dates
library(lubridate)
library(zoo)

### Utility
library(glue)
library(RColorBrewer)
library(rlang)
library(tippy)

### Non-CRAN
library(sigtest)
library(mi.r.utils)


# Error options -----------------------------------------------------------
options(warn = 1)
options(shiny.sanitize.errors = TRUE)
options(shiny.error = browser)


# Source files ------------------------------------------------------------
source("./global/index.R", local = TRUE)
source("./global/colours.R", local = TRUE)
source("./global/hcoptions.R", local = TRUE)
source("./global/levels.R", local = TRUE)
source("./global/choices.R", local = TRUE)
source("./ui/ui.R", local = TRUE)


ui <- function(app_title) {{
  fluidPage(
    useShinyjs(),
    HTML('<html lang="en">'),
    HTML('<meta name="viewport" content="width=1024">'),
    title = app_title,
    tags$head(
      tags$link(rel = "stylesheet", href = "style.css"),
      tags$link(
        rel = "stylesheet",
        href = "https://cdn.jsdelivr.net/npm/semantic-ui@2.3.1/dist/semantic.min.css"
      ),
      tags$link(
        rel = "stylesheet",
        href = "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker3.min.css"
      ),
      tags$link(
        rel = "stylesheet",
        href = "https://cdn.jsdelivr.net/npm/datatables@1.10.18/media/css/jquery.dataTables.min.css"
      ),
      tags$link(
        rel = "stylesheet",
        href = "https://cdnjs.cloudflare.com/ajax/libs/semantic-ui-calendar/0.0.8/calendar.min.css"
      ),
      tags$link(
        rel = "stylesheet",
        href = "https://cdn.datatables.net/1.10.17/css/dataTables.semanticui.min.css"
      ),
      tags$script(
        type = "text/javascript",
        src = "https://cdn.jsdelivr.net/npm/datatables@1.10.18/media/js/jquery.dataTables.min.js"
      ),
      tags$script(
        type = "text/javascript",
        src = "https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment-with-locales.min.js"
      ),
      tags$script(
        type = "text/javascript",
        src = "https://cdnjs.cloudflare.com/ajax/libs/semantic-ui-calendar/0.0.8/calendar.min.js"
      ),
      tags$script(
        type = "text/javascript",
        src = "https://cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.js"
      ),
      tags$script(
        type = "text/javascript",
        src = "https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/tablesort.min.js"
      ),
      tags$script(type = "text/javascript", src = "https://unpkg.com/@popperjs/core@2"),
      tags$script(type = "text/javascript", src = "https://unpkg.com/tippy.js@6"),
      tags$script(
        "tippy.setDefaultProps({theme: 'nhs-blue', allowHTML: true, zIndex: 100000});"
      )
    ),
    div(style = 'min-height: 100vh',
      suppressDependencies('datatable'),
      ui_side,
      div(
        class = 'thirteen wide column',
        ui_main
      ),
      ui_footer,
      tags$script("tippy('.info-tippy');"),
      tags$script(src = 'custom.js')
    ),
    HTML('</html>')
  )
}}


server <- function(input, output, session) {{

  # Stop app when browser is closed, only when run locally
  is_server <- nzchar(Sys.getenv("SHINY_PORT"))
  if (!is_server) session$onSessionEnded(stopApp)

  ### Reactive values for data
  ### There is a group A and B for which different regions can belong to.
  ### Each has a monthly and 3 month rolling (TMR) version
  groups <- list("A", "B")

  filter_data <- function (.data, .regions, three_month_rolling = FALSE) {{
    minus_months <- months(0)
    if (three_month_rolling) minus_months <- months(2)

    .data %>%
      filter(
        between(
          first_of_month,
          input$month_range[1] %m-% minus_months,
          input$month_range[2]
        ),
        region %in% .regions
      )
  }}

  filtered_data <- reactiveValues(
    A     = NULL,
    B     = NULL,
    TMR_A = NULL,
    TMR_B = NULL
  )

  observeEvent({{
    regions_saved_A()
    input$month_range
  }}, {{
    filtered_data$A     = filter_data(data, regions_saved_A())
    filtered_data$TMR_A = filter_data(data, regions_saved_A(), TRUE)
  }})

  observeEvent({{
    regions_saved_B()
    input$month_range
  }}, {{
    filtered_data$B     = filter_data(data, regions_saved_B())
    filtered_data$TMR_B = filter_data(data, regions_saved_B(), TRUE)
  }})


# Source outputs ----------------------------------------------------------
  source("./server/ui_outputs.R", local = TRUE)

  ### Page outputs under here, in menu order
  ### Page outputs above
}}

shinyApp(ui("{app_title}"), server)
